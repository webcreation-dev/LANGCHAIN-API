services:
  # Application Node.js
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./:/app
  #     - /app/node_modules
  #     - ./uploads:/app/uploads
  #   environment:
  #     - NODE_ENV=development
  #     - PORT=3000
  #     - MONGO_URI=mongodb://mongodb:27017/question-generator
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - GROQ_API_KEY=${GROQ_API_KEY}
  #     - GROQ_MODEL=llama-3.3-70b-versatile
  #     - CONCURRENCY=5
  #   depends_on:
  #     - mongodb
  #     - redis
  #   restart: unless-stopped
  #   networks:
  #     - app-network

  # MongoDB
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-root}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-password}
    restart: always
    networks:
      - app-network

  # MongoDB Express (interface d'administration)
  mongo-express:
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME:-root}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD:-password}
      - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
      - mongodb
    restart: always
    networks:
      - app-network

  # Redis pour les files d'attente
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - app-network

  # Interface pour Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    restart: always
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data: